-- MySQL Script generated by MySQL Workbench
-- Fri Jan 20 12:34:31 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema assigmentdatabase
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema assigmentdatabase
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `assigmentdatabase` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `assigmentdatabase` ;

-- -----------------------------------------------------
-- Table `assigmentdatabase`.`facultlymemeberview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`facultlymemeberview` (
  `FacultyID` INT NULL DEFAULT NULL,
  `Name` INT NULL DEFAULT NULL,
  `Email` INT NULL DEFAULT NULL,
  `Department` INT NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`facultymembers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`facultymembers` (
  `FacultyID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(255) NOT NULL,
  `Email` VARCHAR(255) NOT NULL,
  `Department` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`FacultyID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `Email` ON `assigmentdatabase`.`facultymembers` (`Email` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`fuel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`fuel` (
  `FuelID` INT NOT NULL AUTO_INCREMENT,
  `FuelType` VARCHAR(255) NOT NULL,
  `FuelDate` DATE NOT NULL,
  `FuelCost` FLOAT NOT NULL,
  `CreditCardNumber` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`FuelID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`hiredvehicles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`hiredvehicles` (
  `HireVehiclesID` INT NOT NULL AUTO_INCREMENT,
  `FacultyID` INT NOT NULL,
  `VehicleID` INT NOT NULL,
  `StartDate` DATE NOT NULL,
  `EndDate` DATE NOT NULL,
  PRIMARY KEY (`HireVehiclesID`),
  CONSTRAINT `hiredvehicles_ibfk_1`
    FOREIGN KEY (`FacultyID`)
    REFERENCES `assigmentdatabase`.`facultymembers` (`FacultyID`),
  CONSTRAINT `hiredvehicles_ibfk_2`
    FOREIGN KEY (`VehicleID`)
    REFERENCES `assigmentdatabase`.`vehicles` (`VehicleID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FacultyID` ON `assigmentdatabase`.`hiredvehicles` (`FacultyID` ASC) VISIBLE;

CREATE INDEX `VehicleID` ON `assigmentdatabase`.`hiredvehicles` (`VehicleID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`maintenancedetails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`maintenancedetails` (
  `DetailID` INT NOT NULL AUTO_INCREMENT,
  `LogID` INT NOT NULL,
  `MaintenanceComplaints` VARCHAR(255) NOT NULL,
  `PartsUsed` VARCHAR(255) NOT NULL,
  `Mechanic` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`DetailID`),
  CONSTRAINT `maintenancedetails_ibfk_1`
    FOREIGN KEY (`LogID`)
    REFERENCES `assigmentdatabase`.`maintenancelogs` (`LogID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `LogID` ON `assigmentdatabase`.`maintenancedetails` (`LogID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`maintenancelogs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`maintenancelogs` (
  `LogID` INT NOT NULL AUTO_INCREMENT,
  `VehicleID` INT NOT NULL,
  `MaintenanceType` VARCHAR(255) NOT NULL,
  `LogStartDate` DATE NOT NULL,
  `LogEndDate` DATE NOT NULL,
  PRIMARY KEY (`LogID`),
  CONSTRAINT `maintenancelogs_ibfk_1`
    FOREIGN KEY (`VehicleID`)
    REFERENCES `assigmentdatabase`.`vehicles` (`VehicleID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `VehicleID` ON `assigmentdatabase`.`maintenancelogs` (`VehicleID` ASC) VISIBLE;

CREATE INDEX `maintenancelogs_ibfk_1_idx` ON `assigmentdatabase`.`maintenancelogs` (`VehicleID` ASC) VISIBLE;

CREATE INDEX `maintenancelogs_ibfk_2_idx` ON `assigmentdatabase`.`maintenancelogs` (`VehicleID` ASC) INVISIBLE;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`mileagereports`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`mileagereports` (
  `ReportID` INT NOT NULL AUTO_INCREMENT,
  `VehicleID` INT NOT NULL,
  `Month` INT NOT NULL,
  `Year` INT NOT NULL,
  `Mileage` INT NOT NULL,
  PRIMARY KEY (`ReportID`),
  CONSTRAINT `mileagereports_ibfk_1`
    FOREIGN KEY (`VehicleID`)
    REFERENCES `assigmentdatabase`.`vehicles` (`VehicleID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `VehicleID` ON `assigmentdatabase`.`mileagereports` (`VehicleID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`reservations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`reservations` (
  `ReservationID` INT NOT NULL AUTO_INCREMENT,
  `FacultyID` INT NOT NULL,
  `VehicleID` INT NOT NULL,
  `StartDate` DATE NOT NULL,
  `EndDate` DATE NOT NULL,
  `Purpose` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ReservationID`),
  CONSTRAINT `reservations_ibfk_1`
    FOREIGN KEY (`FacultyID`)
    REFERENCES `assigmentdatabase`.`facultymembers` (`FacultyID`),
  CONSTRAINT `reservations_ibfk_2`
    FOREIGN KEY (`VehicleID`)
    REFERENCES `assigmentdatabase`.`vehicles` (`VehicleID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FacultyID` ON `assigmentdatabase`.`reservations` (`FacultyID` ASC) VISIBLE;

CREATE INDEX `VehicleID` ON `assigmentdatabase`.`reservations` (`VehicleID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`tripcompletionforms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`tripcompletionforms` (
  `FormID` INT NOT NULL AUTO_INCREMENT,
  `HireVehiclesID` INT NOT NULL,
  `EndOdometer` INT NOT NULL,
  `MaintenanceComplaints` VARCHAR(255) NOT NULL,
  `FuelPurchased` INT NOT NULL,
  `CreditCardNumber` VARCHAR(255) NOT NULL,
  `StartOdometer` INT NOT NULL,
  PRIMARY KEY (`FormID`),
  CONSTRAINT `tripcompletionforms_ibfk_1`
    FOREIGN KEY (`HireVehiclesID`)
    REFERENCES `assigmentdatabase`.`hiredvehicles` (`HireVehiclesID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `HireVehiclesID` ON `assigmentdatabase`.`tripcompletionforms` (`HireVehiclesID` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `assigmentdatabase`.`vehicles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `assigmentdatabase`.`vehicles` (
  `VehicleID` INT NOT NULL AUTO_INCREMENT,
  `Make` VARCHAR(255) NOT NULL,
  `Model` VARCHAR(255) NOT NULL,
  `Year` INT NOT NULL,
  `CurrentStatus` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`VehicleID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `Make` ON `assigmentdatabase`.`vehicles` (`Make` ASC, `Model` ASC, `Year` ASC) VISIBLE;

USE `assigmentdatabase` ;

-- -----------------------------------------------------
-- procedure CompleteTrip
-- -----------------------------------------------------

DELIMITER $$
USE `assigmentdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CompleteTrip`(IN newHireVehiclesID INT, IN newEndOdometer INT, IN newMaintenanceComplaints VARCHAR(255), IN newFuelPurchased INT, IN newCreditCardNumber VARCHAR(255), IN newStartOdometer INT)
BEGIN
DECLARE vehicle_status VARCHAR(255);

INSERT INTO TripCompletionForms (HireVehiclesID, EndOdometer, MaintenanceComplaints, FuelPurchased, CreditCardNumber, StartOdometer)
VALUES (newHireVehiclesID, newEndOdometer, newMaintenanceComplaints, newFuelPurchased, newCreditCardNumber, newStartOdometer);

UPDATE Vehicles 
SET 
    CurrentStatus = 'available'
WHERE
    VehicleID = (SELECT 
            VehicleID
        FROM
            HiredVehicles
        WHERE
            HireVehiclesID = newHireVehiclesID);

SELECT 
    CurrentStatus
INTO vehicle_status FROM
    Vehicles
WHERE
    VehicleID = (SELECT 
            VehicleID
        FROM
            HiredVehicles
        WHERE
            HireVehiclesID = newHireVehiclesID);

INSERT INTO MileageReports (VehiclesID, Month, Year, Mileage)
VALUES ((SELECT VehicleID FROM HiredVehicles WHERE HireVehiclesID = newHireVehiclesID), MONTH(NOW()), YEAR(NOW()), (p_EndOdometer - newStartOdometer));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DisplayUnusedBookings
-- -----------------------------------------------------

DELIMITER $$
USE `assigmentdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DisplayUnusedBookings`()
BEGIN
    SELECT HiredVehicles.FacultyID, FacultyMembers.Name
    FROM HiredVehicles
    JOIN FacultyMembers ON HiredVehicles.FacultyID = FacultyMembers.FacultyID
    WHERE HiredVehicles.StartDate <> Vehicles.StartDate 
    AND HiredVehicles.EndDate <> Vehicles.EndDate;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure HireVehicle
-- -----------------------------------------------------

DELIMITER $$
USE `assigmentdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `HireVehicle`(IN newFacultyID INT, IN newVehicleID INT, IN newStartDate DATE, IN newEndDate DATE)
BEGIN
DECLARE vehiclehireavailability VARCHAR(255);
DECLARE vehicle_status VARCHAR(255);
/*Display all available vehicles on a given date.*/
SELECT 
    CurrentStatus
INTO vehicle_status FROM
    Vehicles
WHERE
    VehicleID = newVehicleID;

IF vehicle_status = 'available' THEN
UPDATE Vehicles SET CurrentStatus = 'hired' WHERE VehicleID = newVehicleID;
INSERT INTO HiredVehicles(FacultyID, VehicleID, StartDate, EndDate)
VALUES (newFacultyID, newVehicleID, newStartDate, newEndDate);
SET vehiclehireavailability = 'Vehicle has been successfully hired';
ELSE
SET vehiclehireavailability = 'Vehicle is not available for hire';

END IF;
SELECT vehiclehireavailability;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure MaintenanceReport
-- -----------------------------------------------------

DELIMITER $$
USE `assigmentdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `MaintenanceReport`(IN newvehicleID INT, IN newmaintenanceType VARCHAR(255), IN newstartDate DATE, IN newendDate DATE, IN v_mechanic VARCHAR(255), IN newmaintenanceItem VARCHAR(255), IN newpartsUsed VARCHAR(255))
BEGIN
	/*Maintainance Report */
    INSERT INTO MaintenanceLogs (VehicleID, MaintenanceType, LogStartDate, LogEndDate)
    VALUES (newvehicleID, newmaintenanceType, newstartDate, newendDate);
    SET @logID = LAST_INSERT_ID();
    INSERT INTO MaintenanceDetails (LogID, MaintenanceItem, PartsUsed, Mechanic)
    VALUES (@logID, newmaintenanceItem, newpartsUsed, newmechanic);
SELECT 
    newVehicleID,
    newmaintenanceType,
    newlogStartDate,
    newLogEndDate,
    newMaintenanceItem,
    newPartsUsed,
    newMechanic
FROM
    MaintenanceLogs neww
        JOIN
    MaintenanceDetails md ON ml.LogID = md.LogID
WHERE
    newVehicleID = vehicleID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure TotalMileageByDepartmentYearly
-- -----------------------------------------------------

DELIMITER $$
USE `assigmentdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `TotalMileageByDepartmentYearly`(IN year INT)
BEGIN
	/*Show details of a particular bill.*/
    SELECT FacultyMembers.Department, SUM(Vehicles.Mileage)
    FROM HiredVehicles
    JOIN FacultyMembers ON HiredVehicles.FacultyID = FacultyMembers.FacultyID
    JOIN Vehicles ON HiredVehicles.VehicleID = Vehicles.VehicleID
    WHERE YEAR(HiredVehicles.StartDate) = year
    GROUP BY FacultyMembers.Department;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UnusedBookings
-- -----------------------------------------------------

DELIMITER $$
USE `assigmentdatabase`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UnusedBookings`()
BEGIN /*Display those who booked vehicles but not actually used them.*/
    SELECT HiredVehicles.FacultyID, FacultyMembers.Name
    FROM HiredVehicles
    JOIN FacultyMembers ON HiredVehicles.FacultyID = FacultyMembers.FacultyID
    WHERE HiredVehicles.StartDate <> Vehicles.StartDate 
    AND HiredVehicles.EndDate <> Vehicles.EndDate;
END$$

DELIMITER ;
USE `assigmentdatabase`;

DELIMITER $$
USE `assigmentdatabase`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `assigmentdatabase`.`MaintenanceLogss`
AFTER INSERT ON `assigmentdatabase`.`maintenancelogs`
FOR EACH ROW
BEGIN
    IF (NEW.LogEndDate < NOW()) THEN
        UPDATE Vehicles SET CurrentStatus = 'available' WHERE VehicleID = NEW.VehicleID;
    ELSE
        UPDATE Vehicles SET CurrentStatus = 'maintenance' WHERE VehicleID = NEW.VehicleID;
    END IF;
END$$

USE `assigmentdatabase`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `assigmentdatabase`.`UpdateVehicleStatus`
AFTER INSERT ON `assigmentdatabase`.`maintenancelogs`
FOR EACH ROW
BEGIN
    IF (NEW.LogEndDate < NOW()) THEN
        UPDATE Vehicles SET CurrentStatus = 'available' WHERE VehicleID = NEW.VehicleID;
    ELSE
        UPDATE Vehicles SET CurrentStatus = 'maintenance' WHERE VehicleID = NEW.VehicleID;
    END IF;
END$$

USE `assigmentdatabase`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `assigmentdatabase`.`Reservationss`
AFTER INSERT ON `assigmentdatabase`.`reservations`
FOR EACH ROW
BEGIN
    IF (NEW.StartDate <= NOW() AND NEW.EndDate >= NOW()) THEN
        UPDATE Vehicles SET CurrentStatus = 'reserved' WHERE VehicleID = NEW.VehicleID;
    ELSE
        UPDATE Vehicles SET CurrentStatus = 'available' WHERE VehicleID = NEW.VehicleID;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
